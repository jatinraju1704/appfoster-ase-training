Variables : Init & Dec.
    let myvar;
    myvar = "Hello";
    let myvar = "Hello";

Data Types : 
    String
    Numbers
    Boolean
    Array - let myVariable = [1,'Bob','Steve',10];
    Object - let myVariable = document.querySelector('h1');

    Difference between == and === :

    The main difference between the two operators is how they compare values. 
    The == operator compares the values of two variables after performing type conversion if necessary. 
    On the other hand, the === operator compares the values of two variables without performing type conversion.

    const num = 10;
    const str = "10";

    console.log(num == str); // true - The values are the same after type conversion
    console.log(num === str); // false - The values are different types and not equal

    const name = 'Alice';
    const age = 25;

    // Using template literals
    const message = `My name is ${name} and I am ${age} years old.`;
    console.log(message); // Output: My name is Alice and I am 25 years old.

Comments :
    /*
    Everything in between is a comment.
    */
    // This is a comment

Operators : 
    [ +, -, *, /, = ]
    === : This performs a test to see if two values are equal and of the same data type. 
            It returns a true/false (Boolean) result.
    !, !== : This returns the logically opposite value of what it precedes. 
            It turns a true into a false, etc..

Functions : 
    function name(args1,args2, ...) {
        // body of function
    }

Events : 
    These are code structures that listen for activity in the browser, and run code in response. 
    The most obvious example is handling the click event, which is fired by the browser when you click on something with your mouse. 
    To demonstrate this, enter the following into your console, then click on the current webpage:

    document.querySelector("html").addEventListener("click", function () {
    alert("Ouch! Stop poking me!");
    });


Difference between QuerySelector and getElementById :
    They both retrieve elements from a webpage, however the both have specific uses. 
    If you want your code to be the most efficient and effective code, then when you are trying to retrieve an id then you should use getElementById. 
    If you are trying to retrieve a class or tag then you should use querySelector. 
    

How to pass the form data from html to js function
{
    let data = new FormData(e.target);
    let number = parseInt(data.get("number"));
    let split = parseInt(data.get("count"));
}

Async Keyword : 
    With asynchronous JavaScript, the JavaScript doesn’t wait for responses when executing a function, instead it continues with executing other functions. e.g 
            console.log("Hello.");
            setTimeout(function() 
            {
            console.log("Goodbye!");
            }, 3000);
            console.log("Hello again!");

    There are two ways of writing asynchronous code in JavaScript:
    Promises and async/await.
    
    A promise only passes if a certain criteria is true. With JavaScript promises, we can defer a code execution until an asynchronous request is completed, this way other functions can keep running without blocking the thread.
    Promises are a new way of writing asynchronous JavaScript, its usually an object with three main states, which includes:

    Pending — the initial state of the program before the promise passes or fails
    Resolved — a successful promise
    Rejected — a failed promise

    Async/await helps you write synchronous-looking JavaScript code that works asynchronously.
    The await keyword can only be used inside an async function.
    The await keyword makes the function pause the execution and wait for a resolved promise before it continues:

    e.g
        async function myDisplay() {
        let myPromise = new Promise(function(resolve, reject) {
            resolve("Hello World!");
        });
        document.getElementById("demo").innerHTML = await myPromise;
        }

        myDisplay();